@page "/manage-inventory/{HeroId:guid}"
@using BloodSword.Domain.Characters
@using BloodSword.Domain.Items
@using BloodSword.Domain.Repositories
@inject IHeroRepository HeroRepository
@inject IItemRepository ItemRepository
@inject NavigationManager NavigationManager

@if (hero == null || allItems == null)
{
    <p><em>Зареждане...</em></p>
}
else
{
    <h3>Управление на инвентара на @hero.Name</h3>
    <hr />

    <h4>Предмети в инвентара</h4>
    @if (hero.Inventory.Any())
    {
        <ul class="list-group mb-3">
            @foreach (var item in hero.Inventory)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@item.Name</strong>
                        <br />
                        <small>@item.Description</small>
                    </div>
                    <button class="btn btn-sm btn-danger" @onclick="() => RemoveItem(item)">Премахни</button>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Инвентарът е празен.</p>
    }

    <h4>Налични предмети</h4>
    <ul class="list-group">
        @foreach (var item in allItems)
        {
            @if (!hero.Inventory.Contains(item))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@item.Name</strong>
                        <br />
                        <small>@item.Description</small>
                    </div>
                    <button class="btn btn-sm btn-success" @onclick="() => AddItem(item)">Добави</button>
                </li>
            }
        }
    </ul>

    <div class="mt-3">
        <button class="btn btn-primary" @onclick="NavigateBack">Запази и се върни</button>
    </div>
}

@code {
    [Parameter]
    public Guid HeroId { get; set; }

    private Hero hero;
    private IEnumerable<Item> allItems;

    protected override async Task OnInitializedAsync()
    {
        hero = await HeroRepository.GetByIdAsync(HeroId);
        allItems = await ItemRepository.GetAllAsync();
    }

    private async Task AddItem(Item item)
    {
        hero.AddItem(item);
        await HeroRepository.UpdateAsync(hero);
    }

    private async Task RemoveItem(Item item)
    {
        hero.RemoveItem(item);
        await HeroRepository.UpdateAsync(hero);
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo($"/hero/{HeroId}");
    }
}